#!/usr/bin/env node

const app = require('../lib/app');
const debug = require('debug')('mongo-request-bin:server');
const http = require('http');
const socketService = require('../lib/socketService');
const storage = require('../lib/storage');

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

async function main() {
  const port = process.env.PORT || '3000';
  app.set('port', port);

  const server = http.createServer(app);
  socketService.setServer(server);

  await storage.start();

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

main().catch(function (err) {
  throw err;
});
